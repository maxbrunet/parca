name: Goreleaser

on:
  push:
    tags:
      - v*

permissions:
  contents: write

jobs:
  binary:
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'
          check-latest: true
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
          cache: 'yarn'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        if: startsWith(github.ref, 'refs/tags/')
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manifests:
    name: Generate and release Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: binary
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'
          check-latest: true
          cache: true

      - name: Set up Jsonnet
        run: ./env-jsonnet.sh

      - name: Generate
        run: cd deploy && make --always-make vendor manifests

      - name: Prepare
        run: |
          tar -zcvf deploy/manifests.tar.gz deploy/manifests
          cp deploy/manifests/kubernetes/manifest.yaml deploy/kubernetes-manifest.yaml
          cp deploy/manifests/openshift/manifest.yaml deploy/openshift-manifest.yaml

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            deploy/manifests.tar.gz
            deploy/kubernetes-manifest.yaml
            deploy/openshift-manifest.yaml

  docs:
    name: Publish Docs
    runs-on: ubuntu-latest
    needs: manifests
    steps:
      - uses: actions/checkout@v3

      - name: Publish Netlify
        uses: netlify/actions/build@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Publish Vercel
        run: |
          curl -X POST "https://api.vercel.com/v1/integrations/deploy/${{ secrets.VERCEL_WEBHOOK }}"

  container:
    name: Build and release container images
    runs-on: ubuntu-latest
    needs: binary

    permissions:
      id-token: write
      packages: write
      contents: read

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v2.4.0

      - name: Install crane
        uses: imjasonh/setup-crane@v0.1

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Build container
        run: make container

      - name: Login to registry
        run: |
          echo "${{ secrets.PERSONAL_ACCESS_TOKEN }}" | podman login -u parca-dev --password-stdin ghcr.io

      - name: Push container
        run: |
          make push-container

      - name: Sign container
        env:
          COSIGN_EXPERIMENTAL: true
        run: |
          make sign-container
